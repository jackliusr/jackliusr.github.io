<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FHIR on My learning and diary</title>
    <link>https://jackliusr.github.io/tags/fhir/</link>
    <description>Recent content in FHIR on My learning and diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jul 2024 10:10:00 +0800</lastBuildDate><atom:link href="https://jackliusr.github.io/tags/fhir/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How firely sdk handle extra fields (not extension) in Poco and ISourceNode</title>
      <link>https://jackliusr.github.io/posts/2024/07/how-firely-sdk-handle-extra-fields-not-extension-in-poco-and-isourcenode/</link>
      <pubDate>Tue, 23 Jul 2024 10:10:00 +0800</pubDate>
      
      <guid>https://jackliusr.github.io/posts/2024/07/how-firely-sdk-handle-extra-fields-not-extension-in-poco-and-isourcenode/</guid>
      <description>Most time, I think json is forward and backward compatible as long as some convention is kept such as adding fields only etc. I always thought so since I studied CQRS and event sourcing. Is it true for FHIR, especially firely sdk? I answered so in a discussion, however I doubted it as I didn’t do it in FHIR. Here I have a short code to demostrate the two case. In the end, the result is yes and no.</description>
    </item>
    
    <item>
      <title>Recent learnings in dotnet and FHIR</title>
      <link>https://jackliusr.github.io/posts/2024/06/recent-learnings-in-dotnet-and-fhir/</link>
      <pubDate>Wed, 12 Jun 2024 20:10:00 +0800</pubDate>
      
      <guid>https://jackliusr.github.io/posts/2024/06/recent-learnings-in-dotnet-and-fhir/</guid>
      <description>In the past several months, I called it quite intensive. I need to master the knowledge of FHIR, advanced dotnet technologies (attributes, generator, reflection, code emit, expression tree, advanced linq, customized aspnet pipeline, nuget package), code optimization technologies and several aws technologies (DynamoDB, S3, glue, spark) in depth to meet the schedule of a project. You really can’t account on solution architects or support engineers from cloud providers. I don’t get one perfect answers from them so far when I used their services.</description>
    </item>
    
    <item>
      <title>Data modeling of FHIR searchindices in AWS dynamoDB</title>
      <link>https://jackliusr.github.io/posts/2024/04/data-modeling-of-fhir-searchindices-in-aws-dynamodb/</link>
      <pubDate>Fri, 05 Apr 2024 20:10:00 +0800</pubDate>
      
      <guid>https://jackliusr.github.io/posts/2024/04/data-modeling-of-fhir-searchindices-in-aws-dynamodb/</guid>
      <description>Microsoft FHIR Server serialize searchindices this way in cosmosdb. How to model it in AWS DynamoDB?
 { &amp;#34;id&amp;#34;: &amp;#34;9240cda7-bbb7-4ad4-aa9f-971750a3dc71&amp;#34;, &amp;#34;searchIndices&amp;#34;: [ { &amp;#34;p&amp;#34;: &amp;#34;_id&amp;#34;, &amp;#34;c&amp;#34;: &amp;#34;9240cda7-bbb7-4ad4-aa9f-971750a3dc71&amp;#34; }, { &amp;#34;p&amp;#34;: &amp;#34;_lastUpdated&amp;#34;, &amp;#34;st&amp;#34;: &amp;#34;2018-08-22T23:37:56.1289012+00:00&amp;#34;, &amp;#34;et&amp;#34;: &amp;#34;2018-08-22T23:37:56.1289012+00:00&amp;#34; }, { &amp;#34;p&amp;#34;: &amp;#34;patient&amp;#34;, &amp;#34;r&amp;#34;: &amp;#34;Patient/example&amp;#34; }, { &amp;#34;p&amp;#34;: &amp;#34;performer&amp;#34;, &amp;#34;r&amp;#34;: &amp;#34;Practitioner/example&amp;#34; }, { &amp;#34;p&amp;#34;: &amp;#34;related&amp;#34;, &amp;#34;r_0&amp;#34;: &amp;#34;Observation/example-genetics-1&amp;#34;, &amp;#34;s_1&amp;#34;: &amp;#34;http://hl7.org/fhir/observation-relationshiptypes&amp;#34;, &amp;#34;c_1&amp;#34;: &amp;#34;derived-from&amp;#34; }, { &amp;#34;p&amp;#34;: &amp;#34;related-target&amp;#34;, &amp;#34;r&amp;#34;: &amp;#34;Observation/example-genetics-1&amp;#34; }, { &amp;#34;p&amp;#34;: &amp;#34;related-type&amp;#34;, &amp;#34;s&amp;#34;: &amp;#34;http://hl7.org/fhir/observation-relationshiptypes&amp;#34;, &amp;#34;c&amp;#34;: &amp;#34;derived-from&amp;#34; }, { &amp;#34;p&amp;#34;: &amp;#34;status&amp;#34;, &amp;#34;s&amp;#34;: &amp;#34;http://hl7.</description>
    </item>
    
    <item>
      <title>Extract multiple fields at different levels of nesting json using chatgpt and jmespath</title>
      <link>https://jackliusr.github.io/posts/2024/03/extract-multiple-fields-at-different-levels-of-nesting-json-using-chatgpt-and-jmespath/</link>
      <pubDate>Sat, 02 Mar 2024 20:10:00 +0800</pubDate>
      
      <guid>https://jackliusr.github.io/posts/2024/03/extract-multiple-fields-at-different-levels-of-nesting-json-using-chatgpt-and-jmespath/</guid>
      <description>How do you extract multiple fields at different levels of nesting json resources? jsonpath, jq, jmespath or chatgpt?
 In FHIR, bundle resource in json format usually have multiple level of details nested in json. It’s quite different from other use cases.
 My first thought is using jsonpath as it is quite similar to FHIRPath. There are several limitations of jsonpath which make it infeasible.
  It doesn’t support to the use case, even though JsonPath supports deep scan and Bracket-notated child or children.</description>
    </item>
    
  </channel>
</rss>
